//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KeeOtp2.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KeeOtp2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap clock_black {
            get {
                object obj = ResourceManager.GetObject("clock_black", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap clock_white {
            get {
                object obj = ResourceManager.GetObject("clock_white", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap help_white {
            get {
                object obj = ResourceManager.GetObject("help_white", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap info_white {
            get {
                object obj = ResourceManager.GetObject("info_white", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright (C) 2012-2013 Devin Martin
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining a
        ///copy of this software and associated documentation files (the &quot;Software&quot;),
        ///to deal in the Software without restriction, including without limitation
        ///the rights to use, copy, modify, merge, publish, distribute, sublicense,
        ///and/or sell copies of the Software, and to permit persons to whom the
        ///Software is furnished to do so, subject to the following conditions:
        ///
        ///The above copyright notice and  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KeeOtpLICENSE {
            get {
                return ResourceManager.GetString("KeeOtpLICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap lock_white {
            get {
                object obj = ResourceManager.GetObject("lock_white", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///                                 Apache License
        ///                           Version 2.0, January 2004
        ///                        http://www.apache.org/licenses/
        ///
        ///   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        ///
        ///   1. Definitions.
        ///
        ///      &quot;License&quot; shall mean the terms and conditions for use, reproduction,
        ///      and distribution as defined by Sections 1 through 9 of this document.
        ///
        ///      &quot;Licensor&quot; shall mean the copyright owner or entity authorized by
        ///      the copyright owner that  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MaterialDesignIconsLICENSE {
            get {
                return ResourceManager.GetString("MaterialDesignIconsLICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apache License
        ///                           Version 2.0, January 2004
        ///                        http://www.apache.org/licenses/
        ///
        ///   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        ///
        ///   1. Definitions.
        ///
        ///      &quot;License&quot; shall mean the terms and conditions for use, reproduction,
        ///      and distribution as defined by Sections 1 through 9 of this document.
        ///
        ///      &quot;Licensor&quot; shall mean the copyright owner or entity authorized by
        ///      the copyright owner that is granting the License.
        ///
        ///      &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NHotkeyLICENSE {
            get {
                return ResourceManager.GetString("NHotkeyLICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Apache License
        ///                           Version 2.0, January 2004
        ///                        http://www.apache.org/licenses/
        ///
        ///   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        ///
        ///   1. Definitions.
        ///
        ///      &quot;License&quot; shall mean the terms and conditions for use, reproduction,
        ///      and distribution as defined by Sections 1 through 9 of this document.
        ///
        ///      &quot;Licensor&quot; shall mean the copyright owner or entity authorized by
        ///      the copyright owner that is granting the License.
        ///
        ///      &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NHotkeyWindowsFormsLICENSE {
            get {
                return ResourceManager.GetString("NHotkeyWindowsFormsLICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MIT License
        ///
        ///Copyright (c) 2017 Kyle Spearrin
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining a copy
        ///of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///in the Software without restriction, including without limitation the rights
        ///to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///copies of the Software, and to permit persons to whom the Software is
        ///furnished to do so, subject to the following conditions:
        ///
        ///The above copyright  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OtpNetLICENSE {
            get {
                return ResourceManager.GetString("OtpNetLICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap qr_white {
            get {
                object obj = ResourceManager.GetObject("qr_white", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap settings_white {
            get {
                object obj = ResourceManager.GetObject("settings_white", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MIT License (MIT)
        ///
        ///Copyright (c) 2015 Troy Willmot
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining a copy
        ///of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///in the Software without restriction, including without limitation the rights
        ///to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///copies of the Software, and to permit persons to whom the Software is
        ///furnished to do so, subject to the following conditions:
        ///
        ///The above c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string YortNtpPortableLICENSE {
            get {
                return ResourceManager.GetString("YortNtpPortableLICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to                                  Apache License
        ///                           Version 2.0, January 2004
        ///                        http://www.apache.org/licenses/
        ///
        ///   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        ///
        ///   1. Definitions.
        ///
        ///      &quot;License&quot; shall mean the terms and conditions for use, reproduction,
        ///      and distribution as defined by Sections 1 through 9 of this document.
        ///
        ///      &quot;Licensor&quot; shall mean the copyright owner or entity authorized by
        ///      the copyright owner that is [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ZXingNetLICENSE {
            get {
                return ResourceManager.GetString("ZXingNetLICENSE", resourceCulture);
            }
        }
    }
}
