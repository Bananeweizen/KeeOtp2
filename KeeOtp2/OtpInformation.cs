using System;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using KeePass.Plugins;
using KeePassLib.Security;
using OtpSharp;

namespace KeeOtp2
{
    public partial class OtpInformation : Form
    {
        public OtpAuthData Data { get; set; }
        bool fullyLoaded = false;
        KeePassLib.PwEntry entry;
        IPluginHost host;

        public OtpInformation(OtpAuthData data, KeePassLib.PwEntry entry, IPluginHost host)
        {
            InitializeComponent();
            this.Shown += (sender, e) => FormWasShown();

            pictureBoxBanner.Image = KeePass.UI.BannerFactory.CreateBanner(pictureBoxBanner.Width,
                pictureBoxBanner.Height,
                KeePass.UI.BannerStyle.Default,
                Resources.lock_key.GetThumbnailImage(32, 32, null, IntPtr.Zero),
                "Configuration",
                "Set up the key for generating one time passwords");

            this.Icon = host.MainWindow.Icon;

            this.Data = data;
            this.entry = entry;
            this.host = host;

            if (this.Data != null && this.Data.KeeOtp1Mode)
            {
                buttonMigrate.Visible = true;
                pictureBoxMigrateQuestionmark.Visible = true;
                pictureBoxMigrateQuestionmark.Image = SystemIcons.Question.ToBitmap();

                ToolTip toolTip = new ToolTip();
                toolTip.ToolTipTitle = "Why am I seeing this?";
                toolTip.IsBalloon = true;
                toolTip.SetToolTip(buttonMigrate, "Since KeePass 2.47, TOTPs can generated by a built-in function.\nYou can use this button to easily migrate to the built-in function.\n\n(It is also recommended!)");
                toolTip.SetToolTip(pictureBoxMigrateQuestionmark, "Since KeePass 2.47, TOTPs can generated by a built-in function.\nYou can use this button to easily migrate to the built-in function.\n\n(It is also recommended!)");
            }
        }

        private void OtpInformation_Load(object sender, EventArgs e)
        {
            this.Left = this.host.MainWindow.Left + 20;
            this.Top = this.host.MainWindow.Top + 20;
        }

        private void FormWasShown()
        {
            if (this.Data != null)
            {
                this.textBoxKey.Text = this.Data.GetPlainSecret();

                if (this.Data.Step != 30 || this.Data.KeeOtp1Mode ||
                    this.Data.Encoding != OtpSecretEncoding.Base32 ||
                    this.Data.Size != 6 || this.Data.OtpHashMode != OtpHashMode.Sha1)
                {
                    this.checkBoxCustomSettings.Checked = true;
                }

                this.textBoxStep.Text = this.Data.Step.ToString();

                this.checkboxOldKeeOtp.Checked = this.Data.KeeOtp1Mode;

                if (this.Data.Encoding == OtpSecretEncoding.Base64)
                {
                    this.radioButtonBase32.Checked = false;
                    this.radioButtonBase64.Checked = true;
                    this.radioButtonHex.Checked = false;
                    this.radioButtonUtf8.Checked = false;
                }
                else if (this.Data.Encoding == OtpSecretEncoding.Hex)
                {
                    this.radioButtonBase32.Checked = false;
                    this.radioButtonBase64.Checked = false;
                    this.radioButtonHex.Checked = true;
                    this.radioButtonUtf8.Checked = false;
                }
                else if (this.Data.Encoding == OtpSecretEncoding.UTF8)
                {
                    this.radioButtonBase32.Checked = false;
                    this.radioButtonBase64.Checked = false;
                    this.radioButtonHex.Checked = false;
                    this.radioButtonUtf8.Checked = true;
                }
                else // default encoding
                {
                    this.radioButtonBase32.Checked = true;
                    this.radioButtonBase64.Checked = false;
                    this.radioButtonHex.Checked = false;
                    this.radioButtonUtf8.Checked = false;

                }

                if (this.Data.Size == 8)
                {
                    this.radioButtonSix.Checked = false;
                    this.radioButtonEight.Checked = true;
                }
                else // default size
                {
                    this.radioButtonSix.Checked = true;
                    this.radioButtonEight.Checked = false;
                }

                if (this.Data.OtpHashMode == OtpHashMode.Sha256)
                {
                    this.radioButtonSha1.Checked = false;
                    this.radioButtonSha256.Checked = true;
                    this.radioButtonSha512.Checked = false;
                }
                else if (this.Data.OtpHashMode == OtpHashMode.Sha512)
                {
                    this.radioButtonSha1.Checked = false;
                    this.radioButtonSha256.Checked = false;
                    this.radioButtonSha512.Checked = true;
                }
                else // default hashmode
                {
                    this.radioButtonSha1.Checked = true;
                    this.radioButtonSha256.Checked = false;
                    this.radioButtonSha512.Checked = false;
                }
            }
            else
            {
                this.textBoxStep.Text = "30";
                this.radioButtonSha1.Checked = true;
                this.radioButtonSha256.Checked = false;
                this.radioButtonSha512.Checked = false;

                this.radioButtonSix.Checked = true;
                this.radioButtonEight.Checked = false;

                this.radioButtonBase32.Checked = true;
                this.radioButtonBase64.Checked = false;
                this.radioButtonHex.Checked = false;
                this.radioButtonUtf8.Checked = false;
            }

            SetCustomSettingsState(false);
            this.fullyLoaded = true;
        }

        private void OtpInformation_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (this.DialogResult == System.Windows.Forms.DialogResult.Cancel)
                return;
            try
            {
                int textBoxKeyLength = this.textBoxKey.Text.Length;
                if (string.IsNullOrEmpty(this.textBoxKey.Text))
                {
                    MessageBox.Show("A key must be set", "Missing key", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }

                if (radioButtonBase32.Checked && !Regex.IsMatch(this.textBoxKey.Text, @"^[A-Z2-7=]+$"))
                {
                    MessageBox.Show("The key includes illegal characters.\n\nAllowed characters:\nABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\n\nRegex:\n^[A-Z2-7=]+$", "Illegal character found!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }
                else if (radioButtonBase64.Checked && !Regex.IsMatch(this.textBoxKey.Text, @"^[a-zA-Z0-9\+/]*={0,2}$"))
                {
                    MessageBox.Show("The key includes illegal characters.\n\nAllowed characters:\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789+/=\n\nRegex:\n^[a-zA-Z0-9\\+/]*={0,2}$", "Illegal character found!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }
                else if (radioButtonHex.Checked && !Regex.IsMatch(this.textBoxKey.Text, @"^[a-fA-F0-9]+$"))
                {
                    MessageBox.Show("The key includes illegal characters.\n\nAllowed characters:\nabcdefABCDEF0123456789\n\nRegex:\n^[a-fA-F0-9]+$", "Illegal character found!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }

                // check Base32 format
                if (radioButtonBase32.Checked && (textBoxKeyLength % 8 == 2 || textBoxKeyLength % 8 == 4 || textBoxKeyLength % 8 == 5 || textBoxKeyLength % 8 == 7))
                {
                    this.textBoxKey.Text += new string('=', 8 - textBoxKeyLength % 8);
                }
                else if (radioButtonBase32.Checked && textBoxKeyLength % 8 != 0)
                {
                    MessageBox.Show("The given format of your key is illegal. If you want to check the format, please read the RFC 4648.\n\nLink:\nhttps://tools.ietf.org/html/rfc4648", "Illegal Base32 format!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }

                // check Base64 format
                if (radioButtonBase64.Checked && (textBoxKeyLength % 4 == 2 || textBoxKeyLength % 4 == 3))
                {
                    this.textBoxKey.Text += new string('=', 4 - textBoxKeyLength % 4);
                }
                else if (radioButtonBase64.Checked && textBoxKeyLength % 8 != 0)
                {
                    MessageBox.Show("The given format of your key is illegal. If you want to check the format, please read the RFC 4648.\n\nLink:\nhttps://tools.ietf.org/html/rfc4648", "Illegal Base64 format!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }

                // check Hex format
                if (radioButtonHex.Checked && textBoxKeyLength % 2 == 1)
                {
                    MessageBox.Show("The given format of your key is illegal. If you want to check the format, please read the RFC 4648.\n\nLink:\nhttps://tools.ietf.org/html/rfc4648", "Illegal Hex format!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    e.Cancel = true;
                    return;
                }

                if (this.Data == null)
                    this.Data = new OtpAuthData();

                int step = 30;
                if (int.TryParse(this.textBoxStep.Text, out step))
                {
                    if (step != 30)
                    {
                        if (step <= 0)
                        {
                            this.textBoxStep.Text = "30";
                            MessageBox.Show("The time step must be a non-zero positive integer. The standard value is 30.", "Invalid time step", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            e.Cancel = true;
                            return;
                        }
                        else if (MessageBox.Show("You have selected a non-standard time step. You should only proceed if you were specifically told to use this time step size.\nDefault Value: 30\n\nDo you wish to proceed?", "Non-standard time step size", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
                        {
                            e.Cancel = true;
                            return;
                        }
                    }
                }
                else
                {
                    this.textBoxStep.Text = "30";
                    MessageBox.Show("The time step must be a non-zero positive integer. The standard value is 30.", "Invalid time step", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    e.Cancel = true;
                    return;
                }

                // size
                if (this.radioButtonSix.Checked)
                    this.Data.Size = 6;
                else if (this.radioButtonEight.Checked)
                    this.Data.Size = 8;
                else
                    this.Data.Size = 6; // default

                // step
                this.Data.Step = Convert.ToInt32(this.textBoxStep.Text);

                // encoding
                if (this.radioButtonBase32.Checked)
                    this.Data.Encoding = OtpSecretEncoding.Base32;
                else if (this.radioButtonBase64.Checked)
                    this.Data.Encoding = OtpSecretEncoding.Base64;
                else if (this.radioButtonHex.Checked)
                    this.Data.Encoding = OtpSecretEncoding.Hex;
                else if (this.radioButtonUtf8.Checked)
                    this.Data.Encoding = OtpSecretEncoding.UTF8;
                else
                    this.Data.Encoding = OtpSecretEncoding.Base32; // default

                // hashmode
                if (this.radioButtonSha1.Checked)
                    this.Data.OtpHashMode = OtpHashMode.Sha1;
                else if (this.radioButtonSha256.Checked)
                    this.Data.OtpHashMode = OtpHashMode.Sha256;
                else if (this.radioButtonSha512.Checked)
                    this.Data.OtpHashMode = OtpHashMode.Sha512;
                else
                    this.Data.OtpHashMode = OtpHashMode.Sha1; // default


                this.Data.SetPlainSecret(this.textBoxKey.Text.Replace(" ", string.Empty).Replace("-", string.Empty));

                this.entry = OtpAuthUtils.purgeLoadedFields(this.Data, this.entry);

                if (checkboxOldKeeOtp.Checked)
                {
                    this.entry = OtpAuthUtils.migrateToKeeOtp1String(this.Data, this.entry);
                }
                else
                {
                    this.entry = OtpAuthUtils.migrateToBuiltInOtp(this.Data, this.entry);
                }
                this.entry.Touch(true);
                this.host.MainWindow.ActiveDatabase.Modified = true;
                this.host.MainWindow.UpdateUI(false, null, false, null, false, null, true);
            }
            catch
            {
                MessageBox.Show("There happened an error. Please check your entered key and your settings!", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                e.Cancel = true;
                return;
            }
        }

        private void checkBoxCustomSettings_CheckedChanged(object sender, EventArgs e)
        {
            SetCustomSettingsState(this.fullyLoaded);
        }

        private void SetCustomSettingsState(bool showWarning)
        {
            var useCustom = this.checkBoxCustomSettings.Checked;

            this.radioButtonBase32.Enabled =
                this.radioButtonBase64.Enabled =
                this.radioButtonHex.Enabled =
                this.radioButtonUtf8.Enabled =
                this.radioButtonSix.Enabled =
                this.radioButtonEight.Enabled =
                this.textBoxStep.Enabled = 
                this.radioButtonSha1.Enabled = 
                this.radioButtonSha256.Enabled = 
                this.radioButtonSha512.Enabled = 
                this.checkboxOldKeeOtp.Enabled = useCustom;
        }

        private void buttonMigrate_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you want to replace the Auto-Type key {TOTP} with the built-in key {TIMEOTP}?", "Migrate Auto-Type", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                this.entry.AutoType.DefaultSequence = this.entry.AutoType.DefaultSequence.Replace("{TOTP}", "{TIMEOTP}");
                foreach (KeePassLib.Collections.AutoTypeAssociation ata in this.entry.AutoType.Associations)
                {
                    ata.Sequence = ata.Sequence.Replace("{TOTP}", "{TIMEOTP}");
                }
            }

            checkboxOldKeeOtp.Checked = false;
            this.DialogResult = DialogResult.OK;
        }

        private void textBoxKey_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
                this.DialogResult = DialogResult.OK;
        }
    }
}
